{
  "version": 3,
  "sources": ["../../../../../../apps/auth/src/main.ts"],
  "sourcesContent": ["import express  , {Express , Request , Response  } from 'express';\r\nimport dotenv from 'dotenv';\r\nimport cors from \"cors\";\r\n\r\ndotenv.config({\r\n  path: '../../../.env',\r\n\r\n});\r\nimport { connectToDb } from '@auth/mongo';\r\nimport passport from \"passport\"\r\nimport userRoutes from \"./routes/userRoutes\";\r\nimport morgan from \"morgan\" ;\r\n\r\nimport session from \"express-session\"\r\nimport { Apperror } from '@auth/utils';\r\nimport {User} from \"@auth/mongo\"\r\nimport {Strategy as GoogleStrategy, VerifyCallback } from \"passport-google-oauth2\"\r\n\r\nconnectToDb();\r\n\r\n\r\n\r\nconst app: Express = express();\r\n\r\nconst corsOptions = {\r\n  origin: \"chrome-extension://ifonkoabimjngaeomelmfaifpaojiofb\",\r\n  \r\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n  optionsSuccessStatus: 200\r\n}\r\n\r\napp.use(cors(corsOptions));\r\n\r\napp.use(express.json());\r\napp.use(morgan(\"dev\"));\r\napp.use(\r\n  session({\r\n    secret: process.env.SESSION_SECRET as string,\r\n    resave: true,\r\n    saveUninitialized: true,\r\n  })\r\n);\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n// app.use(cors())\r\napp.use(\"/api/v1/user\", userRoutes);\r\n\r\n\r\npassport.use(new GoogleStrategy({\r\n    clientID: process.env.GOOGLE_CLIENT_ID as string,\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n    callbackURL: `${process.env.DOMAIN}/api/v1/user/auth/google/callback` as string,\r\n    passReqToCallback: true, \r\n    \r\n  },\r\n  async function(request: Request, accessToken: string, refreshToken: string, profile: any, done: VerifyCallback) {\r\n    try {\r\n      const ifuserExists = await User.findOne({ googleId: profile.id });\r\n\r\n      if (ifuserExists) {\r\n        ifuserExists.acessToken = accessToken;\r\n        ifuserExists.rToken = refreshToken;\r\n        await ifuserExists.save();\r\n\r\n        done(null, ifuserExists);\r\n      } else {\r\n        const user = await User.create({\r\n          name: profile.displayName,\r\n          email: profile.email,\r\n          picture: profile.picture,\r\n          sub: profile.sub,\r\n          domain: profile.domain,\r\n          googleId: profile.id,\r\n          acessToken : accessToken,\r\n          rToken : refreshToken,\r\n          emailSelected : []\r\n        });\r\n        await user.save();\r\n        done(null, user);\r\n      }\r\n    } catch (error:any) {\r\n      done(new Apperror(error.message, 400), null);\r\n    }\r\n  }\r\n));\r\n\r\npassport.serializeUser(function(user: any, done: (error: any, id?: any) => void) {\r\n  console.log(user._id , \"serial\")\r\n  done(null, user._id);\r\n});\r\n\r\npassport.deserializeUser(async function(id: any, done: (error: any, user?: any) => void) {\r\n  console.log(id , \"deserial\")\r\n  const user = await User.findById(id);\r\n  if (user) {\r\n    return done(null, user);\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\napp.get(\"/\", (req: Request, res: Response) => {\r\n  res.send(\"Hello World!\");\r\n});\r\n\r\n\r\napp.use(\"*\", (req: Request, res: Response) => {\r\n  res.send(\"404 Not Found\");\r\n}) \r\n// app.use(errorMiddleware)\r\n\r\n\r\napp.get('/', (req, res) => {\r\n  res.send({ message: 'Hello API' });\r\n});\r\nconst host = process.env.HOST ?? '127.0.0.1';\r\nconst port = process.env.AUTH_PORT ? Number(process.env.AUTH_PORT) : 4000;\r\n\r\napp.listen(port, host, () => {\r\n  console.log(`[ ready ] http://${host}:${port}`);\r\n});"],
  "mappings": "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",
  "names": ["import_mongo", "dotenv", "express", "cors", "morgan", "session", "passport", "userRoutes", "GoogleStrategy"]
}
