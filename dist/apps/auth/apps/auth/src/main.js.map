{
  "version": 3,
  "sources": ["../../../../../../apps/auth/src/main.ts"],
  "sourcesContent": ["import express  , {Express , Request , Response  } from 'express';\nimport dotenv from 'dotenv';\nimport cors from \"cors\";\n\ndotenv.config({\n  path: '../../../.env',\n\n});\nimport { connectToDb } from '@auth/mongo';\nimport passport from \"passport\"\nimport userRoutes from \"./routes/userRoutes\";\nimport morgan from \"morgan\" ;\n\nimport session from \"express-session\"\nimport { Apperror } from '@auth/utils';\nimport {User} from \"@auth/mongo\"\nimport {Strategy as GoogleStrategy, VerifyCallback } from \"passport-google-oauth2\"\n\nconnectToDb();\n\n\n\nconst app: Express = express();\n\nconst corsOptions = {\n  origin: 'https://commu-net.vercel.app',\n  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n  optionsSuccessStatus: 200\n}\n\napp.use(cors(corsOptions));\n\napp.use(express.json());\napp.use(morgan(\"dev\"));\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET as string,\n    resave: true,\n    saveUninitialized: true,\n  })\n);\napp.use(passport.initialize());\napp.use(passport.session());\n// app.use(cors())\napp.use(\"/api/v1/user\", userRoutes);\n\n\npassport.use(new GoogleStrategy({\n    clientID: process.env.GOOGLE_CLIENT_ID as string,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\n    callbackURL: `${process.env.DOMAIN}/api/v1/user/auth/google/callback` as string,\n    passReqToCallback: true, \n    \n  },\n  async function(request: Request, accessToken: string, refreshToken: string, profile: any, done: VerifyCallback) {\n    try {\n      const ifuserExists = await User.findOne({ googleId: profile.id });\n      console.log(refreshToken);\n      console.log(accessToken);\n      if (ifuserExists) {\n        ifuserExists.acessToken = accessToken;\n        ifuserExists.rToken = refreshToken;\n        await ifuserExists.save();\n        done(null, ifuserExists);\n      } else {\n        const user = await User.create({\n          name: profile.displayName,\n          email: profile.email,\n          picture: profile.picture,\n          sub: profile.sub,\n          domain: profile.domain,\n          googleId: profile.id,\n          acessToken : accessToken,\n          rToken : refreshToken,\n          emailSelected : []\n        });\n        await user.save();\n        done(null, user);\n      }\n    } catch (error:any) {\n      done(new Apperror(error.message, 400), null);\n    }\n  }\n));\n\npassport.serializeUser(function(user: any, done: (error: any, id?: any) => void) {\n  done(null, user._id);\n});\n\npassport.deserializeUser(async function(id: any, done: (error: any, user?: any) => void) {\n  const user = await User.findById(id);\n  if (user) {\n    return done(null, user);\n  }\n});\n\n\n\n\n\napp.get(\"/\", (req: Request, res: Response) => {\n  res.send(\"Hello World!\");\n});\n\n\napp.use(\"*\", (req: Request, res: Response) => {\n  res.send(\"404 Not Found\");\n}) \n// app.use(errorMiddleware)\n\n\napp.get('/', (req, res) => {\n  res.send({ message: 'Hello API' });\n});\nconst host = process.env.HOST ?? '127.0.0.1';\nconst port = process.env.AUTH_PORT ? Number(process.env.AUTH_PORT) : 4000;\n\napp.listen(port, host, () => {\n  console.log(`[ ready ] http://${host}:${port}`);\n});"],
  "mappings": "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",
  "names": ["import_mongo", "dotenv", "express", "cors", "morgan", "session", "passport", "userRoutes", "GoogleStrategy"]
}
