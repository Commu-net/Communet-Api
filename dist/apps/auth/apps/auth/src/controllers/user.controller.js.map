{
  "version": 3,
  "sources": ["../../../../../../../apps/auth/src/controllers/user.controller.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport passport, { AuthenticateOptions } from \"passport\"; \r\nimport {Request , Response , NextFunction, urlencoded} from \"express\"; \r\n\r\nimport { ApiResponse, Apperror } from \"@auth/utils\";\r\nimport { User, userInterface } from \"@auth/mongo\";\r\n\r\ninterface AuthOptions extends AuthenticateOptions{\r\n    accessType? : string,\r\n    approvalPrompt? : string\r\n}\r\n\r\nconst authGoogle = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n        passport.authenticate('google', {\r\n            scope: [\"profile\" ,\"email\",\"https://www.googleapis.com/auth/gmail.compose\"],\r\n            accessType: 'offline',\r\n            approvalPrompt: 'force'\r\n        } as AuthOptions)(req , res , next);\r\n        //     passport.authenticate('google', {\r\n        //         scope:\r\n        //             ['email', 'profile']\r\n        //     }\r\n        // )(req,res , next);\r\n    }\r\n     catch (error: any) {\r\n        return next(new Apperror(error.message, 400));\r\n    }\r\n}\r\n\r\nconst googleCallback  =  (req : Request ,res : Response , next : NextFunction ) => {\r\n    try {\r\n        \r\n        passport.authenticate(\"google\", {\r\n            successRedirect: `${process.env.DOMAIN}/api/v1/user/auth/google/success`,\r\n            failureRedirect: `${process.env.DOMAIN}/api/v1/user/auth/google/failure`,\r\n        })(req, res, next);\r\n    } catch (error : any) {\r\n        return next(new Apperror(error.message , 400));\r\n    }\r\n}\r\n\r\nconst googleSuccess = (req : any , res : Response , next : NextFunction ) => {\r\n    try {\r\n        console.log(req.user);\r\n        const data = {\r\n            email : req.user.email,\r\n            name : req.user.name,\r\n            picture : req.user.picture\r\n        }   \r\n\r\n        const queryString = Object.entries(data).map(([key, val]) => `${key}=${encodeURIComponent(val)}`).join('&');\r\n\r\n        console.log(queryString);\r\n        res.redirect(`${process.env.CLIENT_URL}?${queryString}`);\r\n\r\n    } catch (error : any) {\r\n        return next (new Apperror(error.message , 400));\r\n    }\r\n}\r\n\r\n\r\n\r\nconst googleFailure = (  req : Request, res : Response , next : NextFunction ) => {\r\n    return next (new Apperror(\"You are not authenticated\" , 400));\r\n}\r\n\r\n\r\n// interface RequestWithSession extends Request {\r\n//     logout(arg0: (err: Error) => void): unknown;\r\n//     user: any;\r\n//     session: session.Session & Partial<session.SessionData> & { user?: any };\r\n//   }\r\nconst logout = (req: any, res: Response, next: NextFunction) => {\r\n    try {\r\n        if (req.session) {\r\n            req.session.destroy((err: Error) => {\r\n              if (err) {\r\n                console.log(err);\r\n              }\r\n              req.user = undefined;\r\n            });\r\n            req.logout((err: Error) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                }\r\n            });\r\n            return new ApiResponse(res , 200 , \"Success\" , {message : \"You are logged out\"});\r\n          } else {\r\n            req.logout((err: Error) => {\r\n              if (err) {\r\n                console.log(err);\r\n              }\r\n            });\r\n            return new ApiResponse(res , 200 , \"Success\" , {message : \"You are logged out\"});\r\n          }  \r\n    } catch (error : any) {\r\n        return next(new Apperror(error.message , 400));\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getUserData = async (req : any , res : Response, next : NextFunction ) => { \r\n    const token = req.headers.authorization.split(\" \")[1];\r\n    console.log(token) \r\n    \r\n    \r\n    try {\r\n        const user :userInterface = await User.findOne({sub : token});\r\n        if (!user )  {\r\n            return next(new Apperror(\"Error you are not Authenticated\" , 400));\r\n        }       \r\n        return new ApiResponse(res , 200 , \"Success\" , user);\r\n    \r\n    } catch (error :any) {\r\n        return next(new Apperror(\"Error you are not Authenticated\" , 400));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport  {\r\n    authGoogle , googleCallback ,\r\n    googleSuccess , googleFailure ,\r\n    logout , getUserData\r\n}"],
  "mappings": "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",
  "names": ["passport"]
}
